AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to deploy insecure infrastructure

Parameters:
  CompanyName:
    Description: Company Name
    
    Type: String
    Default: acme
  Environment: 
    Description: Environment
    Type: String
    
    Default: dev
  DBName:
    Description: Name of the Database
    Type: String
    
    Default: db1
  Password: 
    Description: Database Password 
    Type: String
    NoEcho: True
    
    MinLength: 1
    MaxLength: 41
    
    AllowedPattern: ^[a-zA-Z0-9]*$
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    

Resources:
  ####################
  ###  EC2 in VPC  ###
  ####################
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: 
      
        Fn::Select:
        - 0
        - Fn::GetAZs: ""
        
      InstanceType: t2.nano
      SecurityGroupIds: 
      
        - !Ref WebNodeSG
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref WebSubnet
      
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${CompanyName}-${Environment}-ec2" 
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update
          sudo yum -y install httpd php php-mysqlnd
          sudo systemctl enable httpd
          sudo systemctl start httpd
          export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA
          export AWS_SECRET_ACCESS_KEY=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
          export AWS_DEFAULT_REGION=us-west-2
          echo "<h1>Deployed via CloudFormation</h1>" | sudo tee /var/www/html/index.html
    
  WebHostStorage:
    # Unencrypted Volume 
    
    Type: AWS::EC2::Volume
    Properties: 
      AvailabilityZone: !Select 
        - 0
        
        - Fn::GetAZs: ""
      #Encrypted: False
      Size: 1
      
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${CompanyName}-${Environment}-ebs"

  ### CFN Does not Support Volume Snapshot

  EBSAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
    
      InstanceId: !Ref EC2Instance
      VolumeId: !Ref WebHostStorage
      
      Device: /dev/sdh
  
  # Security Group  SSH port open to the world 
  WebNodeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::AccountId}-${CompanyName}-${Environment}-sg"
      
      GroupDescription: !Sub "${AWS::AccountId}-${CompanyName}-${Environment} Security Group"
      VpcId: !Ref WebVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        
        CidrIp: 0.0.0.0/0

  WebVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      
      EnableDnsSupport: True
      EnableDnsHostnames: True
      
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${CompanyName}-${Environment}-vpc"

  WebSubnet: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebVPC
      CidrBlock: 172.16.10.0/24
      AvailabilityZone: !Select
      
        - 0
        - Fn::GetAZs: ""
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-${CompanyName}-${Environment}-subnet"
